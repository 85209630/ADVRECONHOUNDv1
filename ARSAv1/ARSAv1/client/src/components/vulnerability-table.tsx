import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Bug, AlertTriangle, Info } from 'lucide-react';
import type { Vulnerability } from '@shared/schema';

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

export function VulnerabilityTable({ vulnerabilities }: VulnerabilityTableProps) {
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-500 text-white';
      case 'high':
        return 'bg-orange-500 text-white';
      case 'medium':
        return 'bg-yellow-500 text-black';
      case 'low':
        return 'bg-green-500 text-white';
      default:
        return 'bg-gray-500 text-white';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
      case 'high':
        return <AlertTriangle className="w-4 h-4" />;
      case 'medium':
        return <Info className="w-4 h-4" />;
      case 'low':
        return <Bug className="w-4 h-4" />;
      default:
        return <Bug className="w-4 h-4" />;
    }
  };

  if (vulnerabilities.length === 0) {
    return (
      <Card className="bg-gray-800 border-gray-700">
        <CardHeader>
          <CardTitle className="text-xl text-white flex items-center">
            <Bug className="w-5 h-5 text-red-500 mr-2" />
            Security Vulnerabilities
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <div className="text-gray-400 mb-2">
              <Bug className="w-12 h-12 mx-auto mb-4 opacity-50" />
              No vulnerabilities detected
            </div>
            <p className="text-sm text-gray-500">
              The scan completed without finding any security vulnerabilities.
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-gray-800 border-gray-700">
      <CardHeader>
        <CardTitle className="text-xl text-white flex items-center">
          <Bug className="w-5 h-5 text-red-500 mr-2" />
          Security Vulnerabilities ({vulnerabilities.length})
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow className="border-gray-700">
                <TableHead className="text-gray-400">Severity</TableHead>
                <TableHead className="text-gray-400">Type</TableHead>
                <TableHead className="text-gray-400">Description</TableHead>
                <TableHead className="text-gray-400">CVSS</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {vulnerabilities.map((vuln) => (
                <TableRow key={vuln.id} className="border-gray-700">
                  <TableCell>
                    <Badge className={`${getSeverityColor(vuln.severity)} flex items-center gap-1`}>
                      {getSeverityIcon(vuln.severity)}
                      {vuln.severity.toUpperCase()}
                    </Badge>
                  </TableCell>
                  <TableCell className="text-gray-300">{vuln.type}</TableCell>
                  <TableCell className="text-gray-300 max-w-md">
                    <div className="truncate" title={vuln.description}>
                      {vuln.description}
                    </div>
                    {vuln.remediation && (
                      <div className="text-xs text-gray-500 mt-1">
                        Fix: {vuln.remediation}
                      </div>
                    )}
                  </TableCell>
                  <TableCell className="text-gray-300 font-mono">
                    {vuln.cvss || 'N/A'}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  );
}
